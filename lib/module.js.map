{"mappings":";IACI,EAIG,AAJH,6OAIG,AAJH,EAIG,aACS,GAAG,EAAE,MAAM,CAAE,CAAC;QACtB,IAAI,CAAC,GAAG,GAAG,GAAG;QACd,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,CAAC;YAAA,IAAI,EAAE,KAAK;YAAE,IAAI,EAAE,KAAK;QAAA,CAAC;QAClD,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC,WAAW;QACzB,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;QACtB,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;QACvB,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;QACvB,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;QACzB,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,CAAM,QAAG,CAAC,GAAK,CAAC;YACrC,IAAI,CAAC,YAAY,CAAC,OAAO,EAAC,OAAO,GAAI,OAAO,CAAC,CAAC;;QAClD,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,CAAO,SAAG,CAAC,GAAK,CAAC;YACtC,IAAI,CAAC,aAAa,CAAC,OAAO,EAAC,OAAO,GAAI,OAAO,CAAC,CAAC;;QACnD,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,CAAO,SAAG,CAAC,GAAK,CAAC;YACtC,IAAI,CAAC,aAAa,CAAC,OAAO,EAAC,OAAO,GAAI,OAAO,CAAC,CAAC;;QACnD,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,CAAS,WAAG,CAAC,GAAK,CAAC;YACxC,EAAE,EAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM;YACjC,EAAE,EAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;YACrC,IAAI,CAAC,eAAe,CAAC,OAAO,EAAC,OAAO,GAAI,OAAO,CAAC,CAAC;;QACrD,CAAC;IACL,CAAC;IAED,EAEG,AAFH,sCAEG,AAFH,EAEG,CACH,QAAQ,GAAG,CAAC;QACR,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG;QAChC,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,CAAM,WAAQ,CAAC;YACpC,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,CAAM;QAC1C,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,CAAS,WAAG,CAAC,GAAK,CAAC;YACxC,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,GAAG,CAAC,WAAW,CAAC,CAAS,UAAE,CAAC;gBAAA,MAAM,EAAE,CAAC,CAAC,IAAI;YAAA,CAAC;QACrE,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,CAAO,YAAQ,CAAC;YACrC,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,CAAO;QAC3C,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,CAAO,YAAQ,CAAC;YACrC,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,CAAO;QAC3C,CAAC;IACL,CAAC;IAED,EAGG,AAHH,+HAGG,AAHH,EAGG,CACH,aAAa,CAAC,KAAK,EAAE,CAAC;QAClB,IAAI,CAAC,KAAK,GAAG,CAAU,aAAI,CAAC,CAAC;IACjC,CAAC;IAED,EAIG,AAJH,uKAIG,AAJH,EAIG,CACH,EAAE,CAAC,KAAK,EAAE,OAAO,EAAE,CAAC;QAChB,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,GAAG,CAAU,WAAE,MAAM,EAAE,CAAC,GAAI,CAAC;YACtD,EAAE,EAAC,IAAI,CAAC,KAAK,GAAG,CAAU,WAAE,CAAC,MAAM,OAAO,EACtC,MAAM;QAEd,CAAC;QACD,IAAI,CAAC,KAAK,GAAG,CAAU,WAAE,IAAI,CAAC,OAAO;IACzC,CAAC;IAED,EAIG,AAJH,wKAIG,AAJH,EAIG,CACH,GAAG,CAAC,KAAK,EAAE,OAAO,EAAE,CAAC;QACjB,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,GAAG,CAAU,WAAE,MAAM,EAAE,CAAC,GACjD,EAAE,EAAC,IAAI,CAAC,KAAK,GAAG,CAAU,WAAE,CAAC,MAAM,OAAO,EAAE,CAAC;YACzC,IAAI,CAAC,KAAK,GAAG,CAAU,WAAE,MAAM,CAAC,CAAC,EAAE,CAAC;YACpC,MAAM;QACV,CAAC;IAET,CAAC;IAED,EAGG,AAHH,oGAGG,AAHH,EAGG,CACH,IAAI,CAAC,IAAI,EAAE,CAAC;QACR,EAAE,GAAE,IAAI,CAAC,EAAE,IAAI,IAAI,CAAC,EAAE,CAAC,UAAU,KAAK,SAAS,CAAC,IAAI,EAAC,CAAC;YAClD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG;YACtB,GAAG,CAAC,KAAK,GAAG,WAAW,KAAO,CAAC;gBAC3B,EAAE,EAAC,IAAI,CAAC,EAAE,IAAI,IAAI,CAAC,EAAE,CAAC,UAAU,KAAK,SAAS,CAAC,IAAI,EAAC,CAAC;oBACjD,aAAa,CAAC,KAAK;oBACnB,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI;gBACrB,CAAC;YACL,CAAC,EAAE,GAAG;QACV,CAAC,MACG,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI;IAEzB,CAAC;IAED,EAGG,AAHH,6FAGG,AAHH,EAGG,CACH,OAAO,CAAC,GAAG,EAAE,CAAC;QACV,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG;IAChC,CAAC","sources":["src/index.js"],"sourcesContent":["export default class WS {\r\n    /**\r\n     * 构造器\r\n     * @param { string } url websocket地址\r\n     * @param { { data: boolean, json: boolean } } [config] 配置项，data：直接获取message事件的data，json：将message事件的data转换为json对象\r\n     */\r\n    constructor(url, config) {\r\n        this.url = url;\r\n        this.config = config || {data: false, json: false};\r\n        this.et = new EventTarget();\r\n        this.openHandlers = [];\r\n        this.closeHandlers = [];\r\n        this.errorHandlers = [];\r\n        this.messageHandlers = [];\r\n        this.et.addEventListener('open', (e) => {\r\n            this.openHandlers.forEach(handler => handler(e));\r\n        });\r\n        this.et.addEventListener('close', (e) => {\r\n            this.closeHandlers.forEach(handler => handler(e));\r\n        });\r\n        this.et.addEventListener('error', (e) => {\r\n            this.errorHandlers.forEach(handler => handler(e));\r\n        });\r\n        this.et.addEventListener('message', (e) => {\r\n            if(this.config.data) e = e.detail;\r\n            if(this.config.json) e = JSON.parse(e);\r\n            this.messageHandlers.forEach(handler => handler(e));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 创建websocket连接\r\n     */\r\n    createWS() {\r\n        this.ws = new WebSocket(this.url);\r\n        this.ws.addEventListener('open', () => {\r\n            this.et.dispatchEvent(new Event('open'));\r\n        });\r\n        this.ws.addEventListener('message', (e) => {\r\n            this.et.dispatchEvent(new CustomEvent('message', {detail: e.data}));\r\n        });\r\n        this.ws.addEventListener('close', () => {\r\n            this.et.dispatchEvent(new Event('close'));\r\n        });\r\n        this.ws.addEventListener('error', () => {\r\n            this.et.dispatchEvent(new Event('error'));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 清除对应事件的所有处理器\r\n     * @param { 'open' | 'close' | 'error' | 'message' } event 事件名\r\n     */\r\n    clearHandlers(event) {\r\n        this[event + 'Handlers'] = [];\r\n    }\r\n\r\n    /**\r\n     * 向对应事件添加处理器\r\n     * @param { 'open' | 'close' | 'error' | 'message' } event 事件名\r\n     * @param { Function } handler 处理器\r\n     */\r\n    on(event, handler) {\r\n        for(let i = 0; i < this[event + 'Handlers'].length; i++) {\r\n            if(this[event + 'Handlers'][i] === handler) {\r\n                return;\r\n            }\r\n        }\r\n        this[event + 'Handlers'].push(handler);\r\n    }\r\n    \r\n    /**\r\n     * 解绑对应事件的处理器\r\n     * @param { 'open' | 'close' | 'error' | 'message' } event 事件名 \r\n     * @param { Function } handler 处理器\r\n     */\r\n    off(event, handler) {\r\n        for(let i = 0; i < this[event + 'Handlers'].length; i++) {\r\n            if(this[event + 'Handlers'][i] === handler) {\r\n                this[event + 'Handlers'].splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 向服务器发送一个字符串\r\n     * @param { string } data 发送的字符串\r\n     */\r\n    send(data) {\r\n        if(!this.ws || this.ws.readyState !== WebSocket.OPEN){\r\n            this.createWS(this.url);\r\n            let timer = setInterval(() => {\r\n                if(this.ws && this.ws.readyState === WebSocket.OPEN){\r\n                    clearInterval(timer);\r\n                    this.ws.send(data);\r\n                }\r\n            }, 500);\r\n        }else{\r\n            this.ws.send(data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 向服务器发送一个对象\r\n     * @param { Object } obj 发送的对象\r\n     */\r\n    sendObj(obj) {\r\n        this.send(JSON.stringify(obj));\r\n    }\r\n}"],"names":[],"version":3,"file":"module.js.map"}